#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Node\r\n
comment1.params=args
comment1.target=void\ run(java.lang.String[])
comment10.params=adjacent\ recievedDistances
comment10.target=void\ calculateDistanceVector(peerInfo,\ java.util.ArrayList)
comment10.text=\r\n\ adjacent\ \:\ the\ node\ info\ we\ are\ connecting\ through\r\n\ recieverDistances\ \:\ the\ list\ of\ nodes\ that\ adjacent\ has\r\n\ Need\ to\ remove\ our\ own\ connection\ when\ calculating\r\n
comment11.params=arrayToSort
comment11.target=java.util.ArrayList\ sortPeerInfo(java.util.ArrayList)
comment12.params=fileName
comment12.target=void\ readFile(java.lang.String)
comment2.params=destination\ messageType\ message
comment2.target=byte[]\ createPackageMessage(peerInfo,\ char,\ java.lang.String)
comment3.params=destination\ messageType\ message
comment3.target=byte[]\ createPackageMessage(peerInfo,\ char,\ byte[])
comment4.params=message
comment4.target=java.lang.String[]\ breakHeaderMessage(java.lang.String)
comment5.params=headerSplit0
comment5.target=peerInfo\ fromInfo(java.lang.String)
comment6.params=packet
comment6.target=byte[]\ removePackageHeader(byte[])
comment7.params=connectedRouters
comment7.target=byte[]\ convertToByteArray(java.util.ArrayList)
comment7.text=\r\n\ \ \ \ public\ String\ ipFormat()\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ return\ ip\ +\ ","\ +\ por\ \r\n}
comment8.params=byteArray
comment8.target=java.util.ArrayList\ convertToPeerInfoArray(byte[])
comment9.params=message
comment9.target=java.util.ArrayList\ convertToPeerInfoArray(java.lang.String)
numComments=13
